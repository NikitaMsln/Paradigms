(defn det [m]
	(if (= [] m) 1
		(let [i (min (dec (count m)) (count (take-while #(= 0 (% 0)) m)))
			  [[b & l] & h] (assoc m 0 (m i) i (m 0))]
			(if (= 0 b) 0
				(* b (if (= 0 i) 1 -1)
				   (det (mapv (fn [[u & v]] (mapv #(- %1 (* u (/ b) %2)) v l)) h))
				   )
				)
			)
		)
	)

; Справка:
; 	используется идея LUP-разложение: любую матрицу A (n*n) можно представить в виде PA=LU, где
;		L -- нижне-, а U -- верхнетреугольная матрицы, P -- матрица перестановки (получается из единичной матрицы перестановкой из n элементов)
;		поскольку таких (L, U) бесконечно много, то дополнительно требуют, чтобы у L на диагонали были все 1
;
;	Опр. Обозначим через A_sigma матрицу, получаемой из A перестановкой строк по sigma (sigma in Sn)
;		Свойства:
;		1) (A_sigma)_tau = A_sigma * A_tau = A_(sigma * tau)
;		2) det(E_sigma) = (-1)^eps(sigma)
;		3) A_sigma = A * E_sigma
;
;	Тогда det(PA) = det(LU) = det(L) * det(U) = prod l[i][i] * u[i][i] for i in range(n)
; det(PA) = det(P) * det(A) = (-1)^eps(tau) * det(A), где P = E_tau
; Получаем простую формулу: det(A) = (-1)^eps(tau) * prod (l[i][i] * u[i][i] for i in range(n))
; Реализован известный алгоритм lup-разложения, являющийся частным случаем метода Гаусса исключения неизвестных, работает за O(n^3)

;
; n -- размерность матрицы m
; t -- первый стоблец m
; q -- модуль максимального по модулю элемента первого стоблца
; i -- abs(a[i][0]) == q, причем i -- минимальный такой номер
; h -- ищет определитель матрицы, в которой m[0][0] != 0 -- максимальный по модулю в первом столбце
;	 	s -- первая строка m
;	 	b -- m[0][0]
;			Справка: пусть матрица A представима в виде
;			(A11 A12)
;			(A21 A22)
;			где A11, A22 -- квадратные матрицы
;			Тогда матрица (A/A11) = A22 - A21 * (A11 ^ -1) * A12 называется дополнением Шура
;			В частности, если A11 -- матрица 1*1, то представив матрицу в виде:
;			(a nu)
;			(mu D)
;			получаем дополнение Шура Omega = D - 1/a * mu * nu
;			Утв. det(A) = det(A11) * det((A/A11))
;			в частности (в нашем случае), det(A) = a * det(Omega)
;		Omega[i][j] = D[i][j] - 1/a * (mu * nu)[i][j] = D[i][j] - mu[i] * nu[j] / a
;		ясно, что тогда det(A) = a00 * det(Omega)
;		o -- Omega (т.е (A/A[0][0])
;		h(m): if n == 1 -> det([[b]]) = b; else det(m) = det(Omega) * b
;
; d(m):
; 	если n == 1, то det(m) = m[0][0]
; 	если максимальный по модулю в первом столбце == 1, то определитель == 0, т.к. есть нулевой столбец
; 	иначе можно свопнуть i-ю строку с 0й, определитель изменит знак, если i != 0
;
; Оценка времени работы
; Пусть T(n) -- время работы функции d(матрица n*n),
; 		 T1(n) -- время работы фунцкии h(матрица n*n)
; тогда T(n) = T1(n) + O(n) (линия на своп строк)
; T1(n) = T(n - 1) + O(n ^ 2) (квадрат на подсчет матрицы Omega)
; => T(n) = T(n - 1) + O(n ^ 2)
; Утвеждается и объявляется очевидным, что T(n) = O(n ^ 3)

(defn error [m a x] {:post [false]}
	(println "myBase.Matrix     :" m)
	(println "Expected   :" x)
	(println "Found      :" a)
	(println "Difference :" (max (-' x a) (-' a x)))
	)
(def eps (/ 1.0 100000))
(defn abs [x] (max x (-' x)))
(defn check [x m] {:pre [(and (number? x) (== (count m) (count (first m))))]}
	(let [a (det m)] (if (> (abs (- a x)) eps) (error m a x))))

; Some tests
(check 123  [[1 9 2] [2 3 1] [-2 3 -8]])
(check 0    [[1 2] [3 6]])
(check -55  [[-1 0 0] [0 11 0] [0 0 5]])
(check 121  [[1 8 9 3] [1 -8 -2 1/7] [1 4 9 -8] [0 1 0 0]])
(check 271  [[1 2 -1 1 3] [-2 1 4 3 1] [3 -5 0 1 0] [2 2 0 -3 0] [-4 3 1 5 2]])
(check 120  [[120]])
(check 28   [[7 0 0] [-7 1 2] [0 0 4]])
(check 72   [[0 0 9] [0 -8 0] [1 0 0]])
(check -1   [[1 1 1 3] [1 2 3 4] [1 3 6 10] [1 4 10 20]])
(check 4    [[3 5 5 3] [-5 8 7 4] [2 -9 -4 -5] [-3 4 3 2]])
(check -207 [[5 -7 2 -6] [3 1 5 -8] [2 -1 -1 3] [1 4 2 2]])
(check 128  [[6 5 3 8] [4 6 -1 1] [4 2 1 7] [4 2 -3 3]])
(check -90  [[5 6 7 6] [2 4 8 5] [3 5 5 4] [-3 1 5 4]])
(check 15   [[2 7 4 2] [1 2 1 1] [4 5 6 7] [8 9 1 5]])
(check 810  [[1 -9 4 8] [3 1 -1 2] [6 4 2 10] [-2 1 3 8]])
(check -6   [[3 4 1 2] [5 1 2 3] [3 1 1 2] [5 1 2 1]])
(check 0    [[1 -2 1 -3 1] [2 1 -2 1 -1] [1 -1 1 -1 1] [2 -3 2 -4 2] [6 -4 2 -5 3]])
(check 3263909/2 [[1/8 5 9 -1 0] [1 9 15 -8 1] [-96 34 8596 0 -7] [-7 -4 1 6 9] [0 0 0 0 1]])
(check -657390104886055269615894456459698991997116555470065778032669379702161107682994272271/125000000000000000000000000000000000000000000000000000000000000000000000000
	   [[34.01091087173859 -26.511352932355294 -13.938344878099798 73.66086946242169 55.988015282060616]
		[-32.056619142338576 -4.628205761840803 -48.746273938399256 56.90905307096233 90.35129677487052]
		[-67.17611546537867 -60.15407540180324 70.53775181230216 38.12438978144911 13.289053962721113]
		[-10.60185579167792 -2.4555120014217096 89.51370563037688 21.68904583596722 3.201515050642527]
		[41.977167828234826 -14.016345444932668 28.04962601449739 -57.44534521728222 63.071185815653735]])
(check 181134109453
	   [[-11 -21 -73 -32 61 4]
		[43 -8 64 -33 87 44]
		[-49 57 44 19 5 69]
		[30 -98 -60 -53 79 47]
		[-53 -3 -14 -95 -67 62]
		[-52 -52 -91 -17 -59 -5]])
(check 115853073805260
	   [[-14 -41 -12 33 -68 23 89]
		[-30 79 17 -55 -84 26 -86]
		[29 68 -82 -42 42 -10 29]
		[-64 -75 38 -8 61 99 -51]
		[-39 52 -59 37 -57 -100 -47]
		[-6 -96 73 -28 -20 -7 -19]
		[-61 13 -16 31 16 35 51]])
(check (/ -5069965828898038067742629044410948735040959337495724853989715575168577850964440713.0
		  250000000000000000000000000000000000000000000000000000000000000000000000000000)
	   [[0.8649562818012075 -6.812916540261426 -8.099815368389269 -6.035411870037997 7.7644337940332875]
		[-6.004894878967207 -9.923396759997129 -5.995536077902617 -1.453788202423926 6.431507675811467]
		[-5.880011002876997 -9.883898387258188 9.979959708097436 3.5959112362165513 4.293538639230526]
		[-8.11917476349368 -9.733690538393907 -0.7450511809475628 -0.9654960676437359 4.261198446514303]
		[-1.42686349371888 -9.224614504754658 0.4661657968913815 -4.239595475788207 -1.4716154361868306]])
(check (/ 3464650515761462125112085661129405273307858279211878596243000615421054492905290848186193488429293371393283505078430343154716819975717.0
		  40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
	   [[-7.579699307333893 -7.833208040367767 9.184188878752003 -7.743180480887535 -5.408036785413326 0.7106457800860184 -4.7352239246414385 -7.924675554238496]
		[-8.823862393741141 -5.8835208202935725 -6.827722183390095 -5.294595939806901 4.40445240361775 5.8985099939514285 6.229215630790993 -2.957502399542409]
		[-5.448512002879262 9.780593076082326 9.372401395170687 5.684987148758175 -9.958443707373483 8.011565578119196 -6.704094755299337 -8.309100896920533]
		[-2.1979208810600737 -3.127464084105114 5.125107768330402 0.6787057724016936 5.656173193580523 -3.338118469063587 2.1898333725868078 -8.025982118236687]
		[-7.995930216954152 6.432009049734042 9.234083567432101 -3.6952749926864703 7.125039171803344 7.365198039224726 -1.2055664988900112 -2.02706705355598]
		[5.138511962206305 -7.085855156197116 -0.5013283252305989 4.482821252715581 5.995128318392206 8.696096790046084 -2.3191937596090124 4.279329537852984]
		[-7.174529347498709 0.6177464807194752 -6.021916950852246 -8.446639621776884 1.5562732434555944 -4.178654262128029 8.470197626688435 -4.005031298365715]
		[-3.0890741371193053 -2.2192325945018565 -4.559581778407303 -5.073210310210731 -8.256869855934246 4.239541051236602 -8.017149070074968 5.425735339966133]])
(check 7813892385085402
	   [[9 44 -78 -99 92 12 54 -68]
		[0 -37 59 -58 35 -68 -58 -8]
		[-51 -64 -74 -69 -43 -87 90 -40]
		[32 12 -78 29 -41 -27 24 13]
		[43 -27 -54 -58 96 94 -64 92]
		[-29 -65 -68 91 -46 -62 35 33]
		[14 -85 6 -38 -1 -76 93 -3]
		[13 3 -79 -60 -50 -3 20 -23]])

(println "Tests passed!")
